// DO NOT EDIT: Code generated by matcha from decoder_type.matcha

import gleam/list
import gleam/string_tree.{type StringTree}

import gleam/int
import gleam/iterator
import gleam/result
import gleam/string
import ormlette/ir/sql
import ormlette/schema/create as c
import ormlette/templates/utils/combine
import ormlette/templates/utils/listy
import ormlette/templates/utils/to_string

pub fn render_builder(tables tables: List(c.Table)) -> StringTree {
  let builder = string_tree.from_string("")
  let builder =
    string_tree.append(
      builder,
      "//// GENERATED BY ORMLETTE. DO NOT EDIT!
",
    )
  let builder =
    string_tree.append(
      builder,
      "

import decode
import gleam/option.{ type Option }
import gleam/pgo

",
    )
  let builder =
    list.fold(tables, builder, fn(builder, table: c.Table) {
      let builder =
        string_tree.append(
          builder,
          "


pub type ",
        )
      let builder =
        string_tree.append(builder, string.capitalise(table.name))
      let builder =
        string_tree.append(
          builder,
          " {
  ",
        )
      let builder =
        string_tree.append(builder, string.capitalise(table.name))
      let builder = string_tree.append(builder, "(")
      let builder =
        list.fold(table.columns, builder, fn(builder, col: c.Column) {
          let builder = string_tree.append(builder, col.name)
          let builder = string_tree.append(builder, ": Option(")
          let builder = string_tree.append(builder, to_string.coltype(col))
          let builder = string_tree.append(builder, "), ")

          builder
        })
      let builder =
        string_tree.append(
          builder,
          ")
}

pub fn ",
        )
      let builder = string_tree.append(builder, table.name)
      let builder =
        string_tree.append(
          builder,
          "_decoder() {
    decode.into({
      ",
        )
      let builder =
        list.fold(table.columns, builder, fn(builder, col: c.Column) {
          let builder =
            string_tree.append(
              builder,
              "
      use ",
            )
          let builder = string_tree.append(builder, col.name)
          let builder =
            string_tree.append(
              builder,
              " <- decode.parameter
      ",
            )

          builder
        })
      let builder =
        string_tree.append(
          builder,
          "
      ",
        )
      let builder =
        string_tree.append(builder, string.capitalise(table.name))
      let builder = string_tree.append(builder, "(")
      let builder =
        list.fold(table.columns, builder, fn(builder, col: c.Column) {
          let builder = string_tree.append(builder, col.name)
          let builder = string_tree.append(builder, ": ")
          let builder = string_tree.append(builder, col.name)
          let builder = string_tree.append(builder, ", ")

          builder
        })
      let builder =
        string_tree.append(
          builder,
          ")
    })
    ",
        )
      let builder =
        list.fold(table.columns, builder, fn(builder, col: c.Column) {
          let builder =
            string_tree.append(
              builder,
              "
    |> decode.field(\"",
            )
          let builder = string_tree.append(builder, table.name)
          let builder = string_tree.append(builder, "_")
          let builder = string_tree.append(builder, col.name)
          let builder = string_tree.append(builder, "\", decode.optional(")
          let builder =
            string_tree.append(builder, to_string.decode_type(col))
          let builder =
            string_tree.append(
              builder,
              "))
    ",
            )

          builder
        })
      let builder =
        string_tree.append(
          builder,
          "
}

",
        )
      let builder =
        list.fold(
          combine.combine(table),
          builder,
          fn(builder, combined_table: c.Table) {
            let builder =
              string_tree.append(
                builder,
                "

pub type ",
              )
            let builder =
              string_tree.append(
                builder,
                string.replace(string.capitalise(combined_table.name), "_", ""),
              )
            let builder =
              string_tree.append(
                builder,
                " {
  ",
              )
            let builder =
              string_tree.append(
                builder,
                string.replace(string.capitalise(combined_table.name), "_", ""),
              )
            let builder =
              string_tree.append(
                builder,
                "(
    ",
              )
            let builder =
              list.fold(
                list.zip(
                  combine.get_column_info(combined_table),
                  combined_table.columns,
                ),
                builder,
                fn(builder, col_stuff) {
                  let builder =
                    string_tree.append(builder, { col_stuff.0 }.name)
                  let builder = string_tree.append(builder, "_")
                  let builder =
                    string_tree.append(
                      builder,
                      { col_stuff.0 }.reference_table,
                    )
                  let builder = string_tree.append(builder, ": Option(")
                  let builder =
                    string_tree.append(
                      builder,
                      to_string.coltype(col_stuff.1),
                    )
                  let builder = string_tree.append(builder, "), ")

                  builder
                },
              )
            let builder =
              string_tree.append(
                builder,
                "
  )
}

pub fn ",
              )
            let builder = string_tree.append(builder, combined_table.name)
            let builder =
              string_tree.append(
                builder,
                "_decoder() {
    decode.into({
      ",
              )
            let builder =
              list.fold(
                combine.get_column_info(combined_table),
                builder,
                fn(builder, col_info: combine.ColumnInfo) {
                  let builder =
                    string_tree.append(
                      builder,
                      "
      use ",
                    )
                  let builder = string_tree.append(builder, col_info.name)
                  let builder = string_tree.append(builder, "_")
                  let builder =
                    string_tree.append(builder, col_info.reference_table)
                  let builder =
                    string_tree.append(
                      builder,
                      " <- decode.parameter
      ",
                    )

                  builder
                },
              )
            let builder =
              string_tree.append(
                builder,
                "
      ",
              )
            let builder =
              string_tree.append(
                builder,
                string.replace(string.capitalise(combined_table.name), "_", ""),
              )
            let builder = string_tree.append(builder, "(")
            let builder =
              list.fold(
                combine.get_column_info(combined_table),
                builder,
                fn(builder, col_info: combine.ColumnInfo) {
                  let builder = string_tree.append(builder, col_info.name)
                  let builder = string_tree.append(builder, "_")
                  let builder =
                    string_tree.append(builder, col_info.reference_table)
                  let builder = string_tree.append(builder, ": ")
                  let builder = string_tree.append(builder, col_info.name)
                  let builder = string_tree.append(builder, "_")
                  let builder =
                    string_tree.append(builder, col_info.reference_table)
                  let builder = string_tree.append(builder, ", ")

                  builder
                },
              )
            let builder =
              string_tree.append(
                builder,
                ")
    })
    ",
              )
            let builder =
              list.fold(
                list.zip(
                  combine.get_column_info(combined_table),
                  combined_table.columns,
                ),
                builder,
                fn(builder, col_stuff) {
                  let builder =
                    string_tree.append(
                      builder,
                      "
    |> decode.field(\"",
                    )
                  let builder =
                    string_tree.append(builder, { col_stuff.0 }.name)
                  let builder = string_tree.append(builder, "_")
                  let builder =
                    string_tree.append(
                      builder,
                      { col_stuff.0 }.reference_table,
                    )
                  let builder =
                    string_tree.append(builder, "\", decode.optional(")
                  let builder =
                    string_tree.append(
                      builder,
                      to_string.decode_type(col_stuff.1),
                    )
                  let builder =
                    string_tree.append(
                      builder,
                      "))
    ",
                    )

                  builder
                },
              )
            let builder =
              string_tree.append(
                builder,
                "
}


",
              )

            builder
          },
        )
      let builder =
        string_tree.append(
          builder,
          "
",
        )

      builder
    })

  builder
}

pub fn render(tables tables: List(c.Table)) -> String {
  string_tree.to_string(render_builder(tables: tables))
}
